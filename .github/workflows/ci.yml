name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Check formatting
        run: bun lint

  test:
  runs-on: ubuntu-latest
  needs: lint
  steps:
    - uses: actions/checkout@v3
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    - name: Install dependencies
      run: bun install
    - name: Run tests with coverage
      run: bun test --coverage
    - name: Generate coverage badge
      run: |
        # Extract coverage percentage from Bun's output
        COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        
        # Determine color based on coverage
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR=brightgreen
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR=green
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR=yellowgreen
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR=yellow
        else
          COLOR=red
        fi
        
        # Create the badge JSON data
        echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"${COVERAGE}%\",\"color\":\"$COLOR\"}" > coverage-badge.json
    
    - name: Upload coverage badge data
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: 7ae414a56d67a99b07fe34009d9cda95
        filename: hellajs-coverage.json
        label: coverage
        message: ${{ env.COVERAGE }}%
        color: ${{ env.COLOR }}

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Build
        run: bun lib

  bundle-size:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Build
        run: bun bundle
      - name: Check bundle size
        run: bun bundlewatch
        env:
          BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI_BRANCH_BASE: master

  release:
    needs: [lint, test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Build
        run: bun bundle
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: bunx semantic-release
